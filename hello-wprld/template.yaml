AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Authorizer and Proxy lambda invocation via API gateway
  Sample SAM Template for hello-world
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
  Api:
    OpenApiVersion: 3.0.1 

Parameters:
  Stage:
    Type: String
    Default: local
    AllowedValues:
    - local
    - predev
    - dev
    - stage
    - prod    

Resources:

  BasicAWSApiGateway:
      Type: AWS::Serverless::Api
      Properties:
        Name: !Join [ "", [ !Ref Stage,"BasicAWSApiGateway"]]
        StageName: !Ref Stage
        EndpointConfiguration: REGIONAL
        MethodSettings:
        - LoggingLevel: ERROR # ERROR/INFO level logging 
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
          DataTraceEnabled: true # enabling Log full requests/responses data in console
          # MetricsEnabled: true    # Enable detailed metrics (error 404, latence, ...)
        Auth:
          Authorizers:
            BasicAuthorizer:
              FunctionPayloadType: TOKEN #Default value is TOKEN
              FunctionArn: !GetAtt BasicAuthorizerFunction.Arn
              Identity:
                Headers:
                  - Authorization # Default: 'Authorization'
          DefaultAuthorizer: BasicAuthorizer
        # DefinitionBody:
        #   'Fn::Transform':
        #     Name: 'AWS::Include'
        #     Parameters:
        #       Location: api-gateway-1.yaml    
        DefinitionBody:
          swagger: "2.0"
          info:
            version: "2020-07-01T13:01:29Z"
            title: "BasicAWSApiGateway"
          x-amazon-apigateway-request-validators:
            basic:
              validateRequestBody: true
              validateRequestParameters: true
          securityDefinitions:
            BasicAuthorizer:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "custom"
              x-amazon-apigateway-authorizer:
                authorizeUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BasicAuthorizerFunction.Arn}/invocations"
                authorizerResultTtlInSeconds: 0
                type: "token"
          schemes:
          - "https"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
            InputModel:
              type: "object"
              title: "InputParams"
          paths:
            /create_plan:
              post:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "Authorization"
                  in: "header"
                  required: true
                  type: "string"
                - in: "body"
                  name: "InputModel"
                  required: true
                  schema:
                    $ref: "#/definitions/InputModel"
                responses: {
                  "200": {
                    "statusCode" : "200",
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                    # "responseTemplates" : { "application/json" : "#set ($root=$input.path('$')) { \"stage\": \"$root.name\", \"user-id\": \"$root.key\" }",
                  }
                }    

                security:
                - BasicAuthorizer: []
                x-amazon-apigateway-request-validator: basic
                # x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers" # Not supported in SAM
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                  requestTemplates:
                    application/json: "{\n  \"data\" : $input.json('$') ,\n  \"http_method\"\
                          \ : \"$context.httpMethod\",\n   \"path\" : \"$context.resourcePath\"\
                          ,\n  \"headers\": {\n    #foreach($param in $input.params().header.keySet())\n\
                          \    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\
                          \ #if($foreach.hasNext),#end\n    \n    #end  \n  },\n  \"jwt_payload\"\
                          : {\n   #foreach($param in $context.authorizer.keySet())\n   \"$param\"\
                          : \"$util.escapeJavaScript($context.authorizer.get($param))\" #if($foreach.hasNext),#end\n\
                          \    \n    #end   \n  }\n\n \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "AWS"
            /list_currencies:
              post:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "Authorization"
                  in: "header"
                  required: true
                  type: "string"
                - in: "body"
                  name: "InputModel"
                  required: true
                  schema:
                    $ref: "#/definitions/InputModel"
                responses: {
                  "200": {
                    "statusCode" : "200",
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                    # "responseTemplates" : { "application/json" : "#set ($root=$input.path('$')) { \"stage\": \"$root.name\", \"user-id\": \"$root.key\" }",
                  }
                }

                security:
                - BasicAuthorizer: []
                x-amazon-apigateway-request-validator: basic
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                  requestTemplates:
                    application/json: "{\n  \"data\" : $input.json('$') ,\n  \"http_method\"\
                          \ : \"$context.httpMethod\",\n   \"path\" : \"$context.resourcePath\"\
                          ,\n  \"headers\": {\n    #foreach($param in $input.params().header.keySet())\n\
                          \    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\
                          \ #if($foreach.hasNext),#end\n    \n    #end  \n  },\n  \"jwt_payload\"\
                          : {\n   #foreach($param in $context.authorizer.keySet())\n   \"$param\"\
                          : \"$util.escapeJavaScript($context.authorizer.get($param))\" #if($foreach.hasNext),#end\n\
                          \    \n    #end   \n  }\n\n \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about  Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Join [ "", [ !Ref Stage,"HelloWorldFunction"]]
      CodeUri: './hello_world/'
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt ProxyLambdaCloudWatchSecretManagerRole.Arn
      Events: #TODO: need to add new events for new end points
        CreatePlan:
          Type: Api # More info about API Event Source:https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref BasicAWSApiGateway
            Path: /create_plan
            Method: post
        ListCurrencies:
          Type: Api # More info about API Event Source:https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref BasicAWSApiGateway
            Path: /list_currencies
            Method: post    

  ApiGatewayInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt HelloWorldFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ "", [
          "arn:aws:execute-api:", 
          {"Ref": "AWS::Region"}, ":", 
          {"Ref": "AWS::AccountId"}, ":", 
          BasicAWSApiGateway, 
          "/*/*/*"
          ]
        ] 
  
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
            # Resource: !Ref BasicAWSApiGateway
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"]  #input must in list of strings
  
  # Allow api gateway to create cloudwatch logs
  Account:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn
        
  ProxyLambdaCloudWatchSecretManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: FreshbotCloudWatchSecretManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
              Resource: arn:aws:secretsmanager:us-east-1:*:secret:dev/us-e1/freshbot/msapi/test-U97LMo
            - Sid: VisualEditor1
              Effect: Allow
              Action: secretsmanager:GetRandomPassword
              Resource: "*"
            - Sid: VisualEditor2
              Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"

  LambdaCloudWatchSecretManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: FreshbotCloudWatchSecretManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
              Resource: arn:aws:secretsmanager:us-east-1:*:secret:dev/us-e1/freshbot/test/secret-WBfeMS
            - Sid: VisualEditor1
              Effect: Allow
              Action: secretsmanager:GetRandomPassword
              Resource: "*"
            - Sid: VisualEditor2
              Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"

  BasicAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ "", [ !Ref Stage,"BasicAuthorizerFunction"]]
      CodeUri: './freshBotAuthorizer/'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaCloudWatchSecretManagerRole.Arn

Outputs:
  BasicAWSApiGateway:
    Description: 'Generic API Gateway endpoint URL for {Stage} stage'
    Value: !Sub 'https://${BasicAWSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/'

  BasicAWSApiGatewayCreatePlan:
    Description: 'API Gateway endpoint URL for {Stage} stage for creating a plan'
    Value: !Sub 'https://${BasicAWSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/create_plan'

  BasicAWSApiGatewayListCurrencies:
    Description: 'API Gateway endpoint URL for {Stage} stage for listing currencies for a site'
    Value: !Sub 'https://${BasicAWSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/list_currencies'  

  # BasicAWSApiGatewayDevRestApiId:
  #   Description: 'API Gateway ARN for Basic AWS API Gateway'
  #   Value: !Ref BasicAWSApiGateway
  #   Export:
  #     Name: BasicAWSApiGateway-Dev-RestApiId
  # BasicAWSApiGatewayDevRootResourceId:
  #   Value: !GetAtt BasicAWSApiGateway.RootResourceId
  #   Export:
  #     Name: BasicAWSApiGateway-Dev-RootResourceId
